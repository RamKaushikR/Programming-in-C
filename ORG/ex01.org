#+TITLE: Exercise 1: Simple Programs
#+AUTHOR:R Ram Kaushik
#+DATE: 06-02-2018
#+LaTeX_HEADER: \usepackage{palatino}
#+LaTeX_HEADER: \usepackage[top=1in, bottom=1.25in, left=1.25in, right=1.25in]{geometry}
#+LaTeX_HEADER: \usepackage{setspace}
#+PROPERTY: header-args :exports both :eval no-exports
#+OPTIONS: toc:nil
#+OPTIONS: num:1
#+begin_latex
%\linespread{1.2}
#+end_latex   
* Questions
  Answer the following questions.
  1. How many lines are printed by =printf("Hello,\nworld!\nBye,\nworld!")=?
     1. 1
     2. 2
     3. 3
     4. 4
     Answer: *4*
  2. What is the output?
     #+BEGIN_EXAMPLE
     a = 5; b = 10;
     a = b;
     b = a;
     printf ("a = %d, b = %d\n", a, b);
     #+END_EXAMPLE
     Answer: *a = 10, b = 10*
  3. What is the output? What does the code do?
     #+BEGIN_EXAMPLE
     a = 5; b = 10;
     a = a+b;
     b = a-b;
     a = a-b;
     printf ("a = %d, b = %d\n", a, b);
     #+END_EXAMPLE
     Answer: *a = 10, b = 5*
  4. What is the output? What does the code do?
     #+BEGIN_EXAMPLE
     a = 5; b = 10; c = 15;
     t = a;
     a = b;
     b = c;
     c = t;
     printf ("a = %d, b = %d, c = %d\n", a, b, c);
     #+END_EXAMPLE
     Answer: *a = 10, b = 15, c = 5*
  5. Translate the expression $d = \sqrt{b^2 - 4ac}$ into C statement.\\
     Answer: d = sqrt(pow(b,2)-(4*a*c))
  6. Translate the expression $d = \sqrt{(x_1 - x_2)^2 + (y_1 -
     y_2)^2}$ into C statement.\\
     Answer: d = sqrt(pow(x1-x2,2)+pow(y1-y2,2))
  7. What is the output?
     #+BEGIN_EXAMPLE
     a = 5; b = 10;
     m = a;
     if (b < m)
        m = b;
     printf ("%d\n", m);
     #+END_EXAMPLE
     Answer: *5*
  8. What is the output?
     #+BEGIN_EXAMPLE
     mark = 40;
     if (mark < 50)
       grade = 'E';
     if (mark < 60)
       grade = 'D';
     if (mark < 70)
       grade = 'C'
     printf ("%c\n", grade);
     #+END_EXAMPLE
     Answer: *C*
  9. Trace the process generated by the loop
     #+BEGIN_EXAMPLE
     n = 5;
     f = 1; i = 0;
     while (i < n) {
       f = f * i;
       i = i + 1;
     }
     #+END_EXAMPLE
     Answer:
     | i | f | i+1 | f*i |
     | 0 | 1 |  1  |  0  |
     | 1 | 0 |  2  |  0  |
     | 2 | 0 |  3  |  0  |
     | 3 | 0 |  4  |  0  |
     | 4 | 0 |  5  |  0  |
  10. Write a loop (while statement) which will generate the process shown in the table.
      | q |  r | r - 5  | q + 1 |
      | 0 | 22 |        |       |
      | 1 | 17 | 22 - 5 | 0 + 1 |
      | 2 | 12 | 17 - 5 | 1 + 1 |
      | 3 |  7 | 12 - 5 | 2 + 1 |
      | 4 |  2 | 7 - 5  | 3 + 1 |
      Answer:
      #+BEGIN_EXAMPLE
      r = 22;
      q = 0;
      while(q<5){
        r=r-5;
        q=q+1;
      }
      #+END_EXAMPLE
      
* Output statements
   Write a program to print this text, with the second and the fourth
   lines indended, on the stdout.
   #+BEGIN_EXAMPLE
   The heights by great men reached and kept
      Were not attained by sudden flight,
   But they, while their companions slept,
      Were toiling upward in the night.
   #+END_EXAMPLE

   1. Create a new program file =longfellow.c= in emacs. Edit your
      program.
   2. Create a makefile to compile your source program file
      =longfellow.c=, compile it to an executable program
      =longfellow=.
   3. If there are any errors as you compile, fix them.
   4. List the errors which occurred.
** Program Design
The program consists of =main()=, which prints the result on =stdout=.
** Sorce Code
#+BEGIN_SRC C
  #include<stdio.h>
  int main(){
    printf("The heights by great men reached and kept\n\tWere not attained by sudden flight,\nBut they, while their companions slept,\n\tWere toiling upward in the night.");
  }
#+END_SRC
** Output
#+RESULTS:
| The | heights | by      | great    | men        | reached | and     | kept |
|     | Were    | not     | attained | by         | sudden  | flight, |      |
| But | they,   | while   | their    | companions | slept,  |         |      |
|     | Were    | toiling | upward   | in         | the     | night.  |      |

* Minimum of three numbers
Write a program =min2.c= to read two numbers from stdin and print
the smallest of the two numbers. Function =min2()= takes two numbers 
as inputs and returns as output the minimum of the two inputs. Design 
a function =min3()= that takes three numbers as inputs and returns as 
output the minimum of the three inputs.
** Specification
2 functions =min2()=, which takes 2 numbers as inputs and returns the
minimum of the two to calling functions, and =min3()=, which takes 3
numbers as inputs and returns the minimum of the 3 to the calling
function.
** Prototype
#+BEGIN_EXAMPLE
int min2(int a, int b);
int min3(int a, int b, int c);
#+END_EXAMPLE
** Program Design
The program consists of 2 functions =min2(int a, int b)= and 
=min3(int a, int b, int c)=, which finds the minimum of the numbers,
and =main()=, which gets the input from =stdin=, calls the function
and prints the result on =stdout=.
** Algorithm
#+BEGIN_EXAMPLE
def min2(a,b):
  if a<b:
    return a
  return b
def min3(a,b,c):
  m=min2(a,b)
  return min2(m,c)
#+END_EXAMPLE
** Source Code
#+BEGIN_SRC C :cmdline <min3.in
  #include<stdio.h>
  int min2(int a, int b){
    if(a<b){
      return a;
    }
    return b;
  }
  int min3(int a, int b, int c){
    int m=min2(a,b);
    return min2(m,c);
  }
  int main(){
    int a,b,c,m;
    scanf("%d%d%d",&a,&b,&c);
    m=min3(a,b,c);
    printf("%d",m);
  }
#+END_SRC
** Test Input
#+BEGIN_EXAMPLE
27 13 53
#+END_EXAMPLE
** Output
#+RESULTS:
: 13
* Power $x^n$
A number $b$ raised to the power $m$, $b^m$, can be calculated by 
cumulatively multiplying 1 by $b$, $m$ times. Define a function 
=power(x, n)= that raises $x$ to the power $n$. It takes =x= and =n= 
as parameters and returns the power $x^n$ as the result. Pass a negative 
exponent to =power()=. What is the error that occurs in the run time? 
Rename =power()= as =pos_power()= and write a function =power()= that 
works correctly for any integer exponent, positive or negative.
** Specification
2 functions =pos_power()=, which gets a number and a posistive number
as input, finds =a^n= and returns it to the calling function, and =power()=,
which gets a number and the exponent as input and returns =a^n= to the
calling function.
** Prototype
#+BEGIN_EXAMPLE
int pos_power(int a, int n);
float power(int a, int n);
#+END_EXAMPLE
** Program Design
The program consists of 2 functions =pos_power(int a, int n)= and
=power(int a, int n)=, which finds the power, and =main()=, which
gets the input from =stdin=, calls the function, and prints the
result on =stdout=.
** Algorithm
#+BEGIN_EXAMPLE
def pos_power(a,n):
  int p=1;
  while n>0:
    p*=a;
    n-=1
  return p
def power(a,n):
  if n<0:
    return 1.0/pos_power(a,-1*n)
  return pos_power(a,n)
#+END_EXAMPLE
** Souce Code
#+BEGIN_SRC C :cmdline <power.in
  #include<stdio.h>
  int pos_power(int a, int n){
    int p=1;
    while(n>0){
      p*=a;
      n--;
    }
    return p;
  }
  float power(int a, int n){
    if(n<0){
      return 1.0/pos_power(a,(-1*n));
    }
    return pos_power(a,n);
  }
  int main(){
    int a,n;
    float f;
    scanf("%d%d",&a,&n);
    f=power(a,n);
    printf("%f",f);
  }
#+END_SRC
** Test Input
#+BEGIN_EXAMPLE
3 3
5 0
2 -2
#+END_EXAMPLE
** Output
#+RESULTS:
: 27.0000
: 1.0000
: 0.2500
* Area & Perimeter
Write functions to calculate
1. the area of a circle
2. the perimeter of a circle
Write a program to read the radius from stdin, calculate the area and the perimeter of 
the circle, and print them on the stdout.
** Specification
2 functions =area()= and =peri()=, which takes the radius as input and returns the area
and perimeter to the calling function.
** Prototype
#+BEGIN_EXAMPLE
float area(int r);
float peri(int r);
#+END_EXAMPLE
** Program Design
The program consists of =area(int r)= & =peri(int r)=, which finds area and perimeter, 
and =main()=, which gets the input from =stdin=, calls the functions, and prints the
result on =stdout=.
** Algorithm
#+BEGIN_EXAMPLE
def area(r):
  return 3.14*r*r
def peri(r):
  return 2*3.14*r
#+END_EXAMPLE
** Souce Code
#+BEGIN_SRC C :cmdline <area.in
  #include<stdio.h>
  float area(int r){
    return 3.14*r*r;
  }
  float peri(int r){
    return 3*3.14*r;
  }
  int main(){
    int r;
    scanf("%d",&r);
    float a,b;
    a=area(r);
    b=peri(r);
    printf("%f %f",a,b);
  }
#+END_SRC
** Test Input
#+BEGIN_EXAMPLE
4
#+END_EXAMPLE
** Output
#+RESULTS:
: 50.240002 37.680000
* Distance
Write a program to compute the distance between two points. To read a 
point, the program should read 2 numbers from the user for its the x 
and y coordinates.  So your program should read 4 numbers for the two 
points. Print the output on the stdout. Implement a function 
=distance(x1, y1, x2, y2)= that takes two points =(x1, y1)= and =(x2, y2)= 
as 4 parameters and returns the distance between the two points.
** Specification
A function =dist()=, which takes 4 points as the inputs, and returns the
distance to the calling function.
** Prototype
#+BEGIN_EXAMPLE
float dist(int x1, int y1, int x2, int y2);
#+END_EXAMPLE
** Program Design
The program consists of =dist(int x1, int y1, int x2, int y2)=, which finds
the distance, and =main()=, which gets the input from =stdin=, calls the 
functio, and prints the result on =stdout=.
** Algorithm
#+BEGIN_EXAMPLE
def dist(x1,y1,x2,y2):
  return pow(pow(x1-x2,2)+pow(y1-y2,2),0.5)
#+END_EXAMPLE
** Source Code
#+BEGIN_SRC C :cmdline <dist.in includes<math.h>
  #include<stdio.h>
  #include<math.h>
  float dist(int x1, int y1, int x2, int y2){
    return(sqrt(pow(x1-x2,2)+pow(y1-y2,2)));
  }
  int main(){
    int x1,x2,y1,y2;
    scanf("%d%d%d%d",&x1,&y1,&x2,&y2);
    float f=dist(x1,y1,x2,y2);
    printf("%f",f);
  }
#+END_SRC
** Test Input
#+BEGIN_EXAMPLE
1 2
3 4
#+END_EXAMPLE
** Output
#+RESULTS:
: 2.828427
* Loop
We want to repeat a statement $n$ times. Use any of the idioms for
repeating a loop $n$ times to print =Hail, Caesar!= 5 times.
** Program Design
The program consists of =main()=, which uses a loop idiom to print
the result on =stdout=.
** Source Code
#+BEGIN_SRC C 
  #include<stdio.h>
  int main(){
    for(int i=0;i<5;i++){
      printf("Hail, Caesar!");
    }
  }
#+END_SRC
** Output
#+RESULTS:
| Hail, Caesar! |
| Hail, Caesar! |
| Hail, Caesar! |
| Hail, Caesar! |
| Hail, Caesar! |
* Factorial
Using one of the loop idioms for iterating a loop $n$ times, implement 
a function to calculate factorial of a number. Drive it from =main()=.
** Specification
A function =factorial()=, which gets a number as the input, finds the
factorial and returns the value to the calling function.
** Prototype
#+BEGIN_EXAMPLE
int factorial(int a);
#+END_EXAMPLE
** Program Design
The program consists of =factorial(int a)=, which finds the factorial,
and =main()=, which gets the input from =stdin=, calls the function and
prints the value on =stdout=.
** Algorithm
#+BEGIN_EXAMPLE
def factorial(a):
  f=1
  while a>0:
    f=f*a
    a=a-1
  return f
#+END_EXAMPLE
** Source Code
#+BEGIN_SRC C :cmdline <fact.in
  #include<stdio.h>
  int factorial(int a){
    int f=1;
    while(a>0){
      f*=a;
      a-=1;
    }
    return f;
  }
  int main(){
    int f;
    scanf("%d",&f);
    int a=factorial(f);
    printf("%d",a);
  }
#+END_SRC
** Test Input
#+BEGIN_EXAMPLE
4 
7
#+END_EXAMPLE
** Output
#+RESULTS:
: 24
: 5040
* Permutation
Design a function to calculate the permutation of $n$ things taken $r$ 
at a time, $_nP_r$. 
** Specification
2 functions =factorial()=, which gets a number as input and returns the
factorial to calling function, and =permutation()=, which takes 2 numbers
as inputs and returns $_nP_r$ to the calling function.
** Prototype
#+BEGIN_EXAMPLE
int factorial(int a);
int permutation(int n, int r);
#+END_EXAMPLE
** Program Design
The program consists of 2 functions =factorial(int a)= and =permutation(int n, int r)=,
which find factorial and permutation, and =main()=, which gets the input
from =stdin=, calls the function and prints the result on =stdout=.
** Algorithm
#+BEGIN_EXAMPLE
def factorial(a):
  f=1
  while a>0:
    f=f*a
    a=a-1
  return f
def permutation(n,r):
  a=factorial(n)
  b=factorial(n-r)
  return a/b
#+END_EXAMPLE
** Source Code
#+BEGIN_SRC C :cmdline <per.in
  #include<stdio.h>
  int factorial(int a){
    int f=1;
    while(a>0){
      f*=a;
      a-=1;
    }
    return f;
  }
  int permutation(int n, int r){
    int a=factorial(n);
    int b=factorial(n-r);
    return a/b;
  }
  int main(){
    int n,r;
    scanf("%d%d",&n,&r);
    int p=permutation(n,r);
    printf("%d",p);
  }
#+END_SRC
** Test Input
#+BEGIN_EXAMPLE
4 2
10 4
#+END_EXAMPLE
** Output
#+RESULTS:
: 12
: 5040
* GCD
Implement a function to compute the GCD (greatest common divisor) of two 
integers. Write a main program to test the function.
** Specification
A function =gcd()=, which gets the 2 numbers as input and returns the GCD
to the calling function.
** Prototype
#+BEGIN_EXAMPLE
int gcd(int a, int b);
#+END_EXAMPLE
** Program Design
The program consists of a function =gcd(int a, int b)=, which calculates 
the GCD, and =main()=, which gets the input from =stdin=, calls the function
and prints the result on =stdout=.
** Algorithm
#+BEGIN_EXAMPLE
def gcd(a,b):
  if a<b:
    a,b=b,a
  while b>0:
    a,b=b,a%b
  return a
#+END_EXAMPLE
** Source Code
#+BEGIN_SRC C :cmdline <gcd.in
  #include<stdio.h>
  int gcd(int a, int b){
    if(a<b){
      int t=a;
      a=b;
      b=t;
    }
    while(b>0){
      int u=a%b;
      a=b;
      b=u;
    }
    return a;
  }
  int main(){
    int a,b;
    while(scanf("%d%d",&a,&b)!=EOF){
      int m=gcd(a,b);
      printf("%d\n",m);
    }
  }
#+END_SRC
** Test Input
#+BEGIN_EXAMPLE
20 5
13 7
88 16
91 52
#+END_EXAMPLE
** Output
#+RESULTS:
: 5
: 1
: 8
: 13
* Quotient & Remainder
Write a program to calculate the quotient and remainder while dividing 
an integer $a$ by an integer $b$.
** Program Design
The program consists of =main()=, which gets the the numbers from =stdin=,
finds the quotient & remainder and prints the result on =stdout=.
** Algorithm
#+BEGIN_EXAMPLE
a,b=//input from user
q=a/b
r=a%b
print(a,b)
#+END_EXAMPLE
** Source Code
#+BEGIN_SRC C :cmdline <qr.in
  #include<stdio.h>
  int main(){
    int a,b,q,r;
    while(scanf("%d%d",&a,&b)!=EOF){
      q=a/b;
      r=a%b;
      printf("%d %d",q,r);
    }
  }
#+END_SRC
** Test Input
#+BEGIN_EXAMPLE
56 7
23 8
88 25
76 4
#+END_EXAMPLE
** Output
#+RESULTS:
: 8 0
: 2 7
: 3 13
: 19 0
